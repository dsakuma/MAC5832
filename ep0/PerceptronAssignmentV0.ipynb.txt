{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Practical assigment 1: perceptrons"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Watching the first lectures by prof. Mostafa, we have learnt about two types of perceptrons: classic and pocket. In this assignment you will implement in Python both types of perceptrons and test them against simulated and one real dataset.\n",
    "\n",
    "Your notebook will be graded automatically so follow the instructions and do not change the name of the functions.\n",
    "\n",
    "We begin importing some libraries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pylab as plt\n",
    "import matplotlib.mlab\n",
    "\n",
    "from IPython.display import display\n",
    "from IPython.core.pylabtools import figsize, getfigs\n",
    "\n",
    "# This line is necessary to show the plots.\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are now ready to generate a dataset. We will start with a 1D Gaussian dataset, i.e., a dataset generated using a Gaussian distribution, to get used to numpy number generator and plot function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f118801d7f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set a seed to guarantee reproducibility\n",
    "np.random.seed(0)\n",
    "\n",
    "# Set mean and standard deviation for set A\n",
    "musetA = 50\n",
    "sigmasetA = 10.0\n",
    "\n",
    "# Set the number of samples\n",
    "NsetA = 1000\n",
    "\n",
    "# Generate set A (check the documentation for random.normal)\n",
    "setA = np.random.normal(musetA, sigmasetA, NsetA)\n",
    "\n",
    "# Set mean and standard deviation for set B\n",
    "musetB = 100\n",
    "sigmasetB = 30.0\n",
    "\n",
    "# Set the number of samples\n",
    "NsetB = 800\n",
    "\n",
    "# Generate set B\n",
    "setB = np.random.normal(musetB, sigmasetB, NsetB)\n",
    "\n",
    "# the histogram of the data setA\n",
    "nbinsA, Abins, Apatches = plt.hist(setA, normed=True, bins=50)\n",
    "\n",
    "# the histogram of the data setB\n",
    "nbinsB, Bbins, Bpatches = plt.hist(setB, normed=True, bins=50)\n",
    "\n",
    "plt.xlabel('Arbitrary number')\n",
    "plt.ylabel('Probability')\n",
    "plt.title('Histogram of two normal distributions')\n",
    "plt.text(60, .025, r'$\\mu_A=50,\\ \\sigma_A=10$')\n",
    "plt.text(125, .015, r'$\\mu_B=1000,\\ \\sigma_B=30$')\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, we are interested in distributions of two or more dimensions. To do that we have to set a covariance matrix first. \n",
    "\n",
    "We are going to start with two independent distributions.\n",
    "\n",
    "Try to modify the parameters, mainly the covariance matrix and see what happens. Try using  equal covariances cosigmaAB = cosigmaBA != 0, then try to make them different. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f1178083ac8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set a seed to guarantee reproducibility\n",
    "np.random.seed(0)\n",
    "\n",
    "# Set mean for set A and B\n",
    "musetA = np.array([50.0,50.0])\n",
    "musetB = np.array([100.0,100.0])\n",
    "\n",
    "sigmasetA = 10.0\n",
    "sigmasetB = 30.0\n",
    "cosigmaAB = 0.0\n",
    "cosigmaBA = 0.0\n",
    "\n",
    "# Set covariance matrix\n",
    "covAB = np.array([[ sigmasetA, cosigmaAB], \n",
    "                [cosigmaBA, sigmasetB]])\n",
    "\n",
    "# Set the number of samples for sets A and B\n",
    "NsetA = 1000\n",
    "NsetB = 800\n",
    "\n",
    "# Generate sets A and B (check the documentation for random.multivariate_normal)\n",
    "setA = np.random.multivariate_normal(musetA, covAB, NsetA)\n",
    "setB = np.random.multivariate_normal(musetB, covAB, NsetB)\n",
    "\n",
    "plt.scatter(setA[:,0], setA[:,1], s=10, cmap='blue')\n",
    "plt.scatter(setB[:,0], setB[:,1], s=10, cmap='orange')\n",
    "\n",
    "plt.title('Scatter plot of two normal distributions')\n",
    "plt.grid(True)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We know now how to generate 2D clouds. Now we must learn how to generate a labeled dataset. To do that, first we join the two sets of points and then we add the labels (-1 and 1 in this case)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/anaconda3/lib/python3.5/site-packages/ipykernel/__main__.py:22: RuntimeWarning: covariance is not positive-semidefinite.\n",
      "/usr/local/anaconda3/lib/python3.5/site-packages/ipykernel/__main__.py:23: RuntimeWarning: covariance is not positive-semidefinite.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f1177febc18>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(180, 2) (180,) (180, 3)\n",
      "[[ 1.         41.20911291 46.17889451]\n",
      " [ 1.         45.65279077 46.55450289]\n",
      " [ 1.         40.32541013 46.87443671]\n",
      " [ 1.         45.16903249 48.18288321]\n",
      " [ 1.         50.62835278 49.93863861]]\n"
     ]
    }
   ],
   "source": [
    "# Set a seed to guarantee reproducibility\n",
    "np.random.seed(0)\n",
    "\n",
    "# Set mean for set A and B\n",
    "musetA = np.array([50.0,50.0])\n",
    "musetB = np.array([65.0,50.0])\n",
    "\n",
    "sigmasetA = 10.0\n",
    "sigmasetB = 10.0\n",
    "cosigmaAB = 4.5\n",
    "cosigmaBA = 25.5\n",
    "\n",
    "# Set covariance matrix\n",
    "covAB = np.array([[sigmasetA, cosigmaAB], \n",
    "                [cosigmaBA, sigmasetB]])\n",
    "\n",
    "# Set the number of samples for sets A and B\n",
    "NsetA = 100\n",
    "NsetB = 80\n",
    "\n",
    "# Generate sets A and B (check the documentation for random.multivariate_normal)\n",
    "setA = np.random.multivariate_normal(musetA, covAB, NsetA)\n",
    "setB = np.random.multivariate_normal(musetB, covAB, NsetB)\n",
    "\n",
    "plt.scatter(setA[:,0], setA[:,1], s=10, cmap='blue')\n",
    "plt.scatter(setB[:,0], setB[:,1], s=10, cmap='orange')\n",
    "\n",
    "plt.title('Scatter plot of two normal distributions')\n",
    "plt.grid(True)\n",
    "plt.axis('equal')\n",
    "plt.show()\n",
    "\n",
    "# Join the datasets A and B (check the documentation for append)\n",
    "datasetAB = np.append(setA,setB,axis=0)\n",
    "NsetAB = NsetA + NsetB\n",
    "\n",
    "# Generate labels\n",
    "labelsAB = np.array([-1.0]*NsetA + [1.0]*NsetB)\n",
    "\n",
    "# Insert x_0 = 1 for all points\n",
    "datasetABx0 = np.insert(datasetAB, 0, [1.0]*NsetAB, axis=1) \n",
    "\n",
    "# Check dataset dimensions\n",
    "print(datasetAB.shape,labelsAB.shape,datasetABx0.shape)\n",
    "\n",
    "# Check if things worked OK\n",
    "print(datasetABx0[:5,])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, the assignment...\n",
    "\n",
    "You are going to implement firt the classic perceptron. To do that, use the signature definition bellow."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def ClassicPerceptron(W,X,Y,maxiter=1000,reorder=True):\n",
    "    \"\"\"ClassicPerceptron function implements the most basic perceptron. \n",
    "\n",
    "    This algorithm starts by reordering the training samples and their labels\n",
    "    if reorder is equal to True. Then, it iterates for all the samples, as many\n",
    "    times as it takes, to correctly classify all the samples, or until the number \n",
    "    of iterations reaches maxiter.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    W : numpy array of floats\n",
    "        The initial set of weights for the perceptron classificator.\n",
    "    X : numpy array of floats\n",
    "        The dataset with the bias (first column is equal to 1.0).\n",
    "    Y : numpy array of floats\n",
    "        The labels (-1.0, ou 1.0) for each line of X.\n",
    "    maxiter : integer\n",
    "        The maximum number of iterations allowed before stopping.\n",
    "    reorder : boolean\n",
    "        reorder the training samples and their labels.\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    W : numpy array of floats\n",
    "        The last set of weights for the perceptron classificator.\n",
    "    niter : integer\n",
    "        The current number of iterations until success, or maxiter. \n",
    "        This is just to have an idea on how many iterations it took \n",
    "        to converge.\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    # Sets the random seed to guarantee reproducibility.\n",
    "    np.random.seed(34191)\n",
    "    \n",
    "    ### BEGIN SOLUTION\n",
    "    \n",
    "    ### END SOLUTION"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "No you are going to implement the pocket perceptron. To do that, use the signature definition bellow."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def PocketPerceptron(W,X,Y,maxiter=1000):\n",
    "    \"\"\"PocketPerceptron function implements the pocket perceptron. \n",
    "\n",
    "    This algorithm starts by checking if all training samples are correctly classified.\n",
    "    If some are not, choose one sample not correctly classified and adjust W. Then it \n",
    "    will repeat the above procedure until all samples are correctly classified, or until \n",
    "    the number of iterations reaches maxiter.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    W : numpy array of floats\n",
    "        The initial set of weights for the perceptron classificator.\n",
    "    X : numpy array of floats\n",
    "        The dataset with the bias (first column is equal to 1.0).\n",
    "    Y : numpy array of floats\n",
    "        The labels (-1.0, ou 1.0) for each line of X.\n",
    "    maxiter : integer\n",
    "        The maximum number of iterations allowed before stopping.\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    W : numpy array of floats\n",
    "        The last set of weights for the perceptron classificator.\n",
    "    niter : integer\n",
    "        The current number of iterations until success, or maxiter. \n",
    "        This is just to have an idea on how many iterations it took \n",
    "        to converge.\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    # Sets the random seed to guarantee reproducibility.\n",
    "    np.random.seed(34191)\n",
    "    \n",
    "    ### BEGIN SOLUTION\n",
    "    \n",
    "    ### END SOLUTION"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Create Assignment",
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.4"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "toc": {
   "colors": {
    "hover_highlight": "#DAA520",
    "running_highlight": "#FF0000",
    "selected_highlight": "#FFD700"
   },
   "moveMenuLeft": true,
   "nav_menu": {
    "height": "30px",
    "width": "252px"
   },
   "navigate_menu": true,
   "number_sections": true,
   "sideBar": true,
   "threshold": 4,
   "toc_cell": false,
   "toc_section_display": "block",
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
